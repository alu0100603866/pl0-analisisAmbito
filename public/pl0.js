/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pl0 = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"PROGRAM":3,"BLOCK":4,"END_SYMBOL":5,"EOF":6,"DEC_CONSTS":7,"DEC_VARS":8,"DEC_PROCS":9,"STATEMENT":10,"DEC_PROC":11,"CONST":12,"DEC_CONST":13,"COMMA_CONST":14,"END_SENTENCE":15,"COMMA":16,"ID_":17,"ASSIGN":18,"NUMBER_":19,"VAR":20,"COMMA_VARS":21,"PROCEDURE":22,"ARGLIST":23,"LEFTPAR":24,"COMMA_ARGLIST":25,"RIGHTPAR":26,"ARGLISTEXP":27,"EXPRESSION":28,"COMMA_ARGLISTEXP":29,"CALL":30,"ARGEXPLIST":31,"BEGIN":32,"STATEMENT_LIST":33,"END":34,"IF":35,"CONDITION":36,"THEN":37,"ELSE":38,"WHILE":39,"DO":40,"ODD":41,"COMPARISON_OP":42,"TERM":43,"ADD":44,"FACTOR":45,"MUL":46,"ID":47,"NUMBER":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"END_SYMBOL",6:"EOF",12:"CONST",15:"END_SENTENCE",16:"COMMA",18:"ASSIGN",20:"VAR",22:"PROCEDURE",24:"LEFTPAR",26:"RIGHTPAR",30:"CALL",31:"ARGEXPLIST",32:"BEGIN",34:"END",35:"IF",37:"THEN",38:"ELSE",39:"WHILE",40:"DO",41:"ODD",42:"COMPARISON_OP",44:"ADD",46:"MUL",47:"ID",48:"NUMBER"},
productions_: [0,[3,3],[4,4],[4,3],[4,3],[4,2],[9,2],[9,0],[7,4],[14,3],[14,0],[13,3],[8,4],[21,3],[21,0],[11,6],[11,5],[23,4],[25,3],[25,0],[27,4],[29,3],[29,0],[10,3],[10,3],[10,2],[10,4],[10,8],[10,6],[10,6],[10,0],[33,3],[33,0],[36,2],[36,3],[28,1],[28,3],[43,1],[43,3],[45,1],[45,1],[45,3],[17,1],[19,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
      return $$[$0-2];
    
break;
case 2:
      this.$ = buildBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
    
break;
case 3:
      this.$ = buildBlock(null, $$[$0-2], $$[$0-1], $$[$0]);
    
break;
case 4:
      this.$ = buildBlock($$[$0-2], null, $$[$0-1], $$[$0]);
    
break;
case 5:
      this.$ = buildBlock(null, null, $$[$0-1], $$[$0]);
    
break;
case 6:
      this.$ = [$$[$0-1]];
      if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);
    
break;
case 8:
      this.$ = [$$[$0-2]];
      if ($$[$0-1] && $$[$0-1].length > 0)
        this.$ = this.$.concat($$[$0-1]);
    
break;
case 9:
      this.$ = [$$[$0-1]];
      if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);
    
break;
case 11:
      this.$ = {
        type: 'CONST VAR',
        name: $$[$0-2].value,
        value: $$[$0].value
      };
    
break;
case 12:
      this.$ = [{
        type: 'VAR',
        name: $$[$0-2].value
      }];

      if ($$[$0-1] && $$[$0-1].length > 0)
        this.$ = this.$.concat($$[$0-1]);
    
break;
case 13:
      this.$ = [{
        type: 'VAR',
        name: $$[$0-1].value
      }];

      if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);
    
break;
case 15:
      this.$ = {
        type: 'PROCEDURE',
        name: $$[$0-4].value,
        args: $$[$0-3],
        block: $$[$0-1]
      };
    
break;
case 16:
      this.$ = {
        type: 'PROCEDURE',
        name: $$[$0-3].value,
        args: null,
        block: $$[$0-1]
      };
    
break;
case 17:
      this.$ = [{
        type: 'ARG',
        content: $$[$0-2].value
      }];

      if ($$[$0-1] && $$[$0-1].length > 0)
        this.$ = this.$.concat($$[$0-1]);
    
break;
case 18:
      this.$ = [{
        type: 'ARG',
        content: $$[$0-1].value
      }];

      if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);
    
break;
case 20:
      this.$ = [{
        type: 'ARGEXP',
        content: $$[$0-2]
      }];

      if ($$[$0-1] && $$[$0-1].length > 0)
        this.$ = this.$.concat($$[$0-1]);
    
break;
case 21:
      this.$ = [{
        type: 'ARGEXP',
        content: $$[$0-1]
      }];

      if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);
    
break;
case 23:
			this.$ = {
				type: 'PROC_CALL',
				name: $$[$0-1].value,
				args: $$[$0]
			};
		
break;
case 24:
			this.$ = {
				type: '=',
				left: $$[$0-2],
				rigth: $$[$0]
			};
		
break;
case 25:
			this.$ = {
				type: 'PROC_CALL',
				name: $$[$0].value
			};
		
break;
case 26:
			this.$ = [$$[$0-2]];
			if ($$[$0-1] && $$[$0-1].length > 0)
				this.$ = this.$.concat($$[$0-1]);
		
break;
case 27:
			this.$ = {
				type: 'IFELSE',
				condition: $$[$0-5],
				true_sentence: $$[$0-2],
				false_sentence: $$[$0]
			};
		
break;
case 28:
			this.$ = {
				type: 'IF',
				condition: $$[$0-3],
				true_sentence: $$[$0]
			};
		
break;
case 29:
			this.$ = {
				type: 'WHILE',
				condition: $$[$0-3],
				statement: $$[$0]
			};
		
break;
case 31:
			this.$ = [$$[$0-1]];
			if ($$[$0] && $$[$0].length > 0)
				this.$ = this.$.concat($$[$0]);
		
break;
case 33:
			this.$ = {
				type: 'ODD',
				exp: $$[$0]
			};
		
break;
case 34:
			this.$ = {
				type: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 36:
      this.$ = {
        type: $$[$0-1],
        left: $$[$0-2],
        right: $$[$0]
      };
    
break;
case 38:
      this.$ = {
        type: $$[$0-1],
        left: $$[$0-2],
        right: $$[$0]
      };
    
break;
case 41:
      this.$ = $$[$0-1];
    
break;
case 42:
    this.$ = {
      type: 'ID',
      value: yytext
    };
  
break;
case 43:
    this.$ = {
      type: 'NUMBER',
      value: yytext
    };
  
break;
}
},
table: [{3:1,4:2,5:[2,7],7:3,8:4,9:5,11:8,12:[1,6],20:[1,7],22:[1,9],30:[2,7],32:[2,7],35:[2,7],39:[2,7],47:[2,7]},{1:[3]},{5:[1,10]},{5:[2,7],8:11,9:12,11:8,15:[2,7],20:[1,7],22:[1,9],30:[2,7],32:[2,7],35:[2,7],39:[2,7],47:[2,7]},{5:[2,7],9:13,11:8,15:[2,7],22:[1,9],30:[2,7],32:[2,7],35:[2,7],39:[2,7],47:[2,7]},{5:[2,30],10:14,15:[2,30],17:16,30:[1,15],32:[1,17],35:[1,18],39:[1,19],47:[1,20]},{13:21,17:22,47:[1,20]},{17:23,47:[1,20]},{5:[2,7],9:24,11:8,15:[2,7],22:[1,9],30:[2,7],32:[2,7],35:[2,7],39:[2,7],47:[2,7]},{17:25,47:[1,20]},{6:[1,26]},{5:[2,7],9:27,11:8,15:[2,7],22:[1,9],30:[2,7],32:[2,7],35:[2,7],39:[2,7],47:[2,7]},{5:[2,30],10:28,15:[2,30],17:16,30:[1,15],32:[1,17],35:[1,18],39:[1,19],47:[1,20]},{5:[2,30],10:29,15:[2,30],17:16,30:[1,15],32:[1,17],35:[1,18],39:[1,19],47:[1,20]},{5:[2,5],15:[2,5]},{17:30,47:[1,20]},{18:[1,31]},{10:32,15:[2,30],17:16,30:[1,15],32:[1,17],34:[2,30],35:[1,18],39:[1,19],47:[1,20]},{24:[1,33]},{24:[1,34]},{5:[2,42],15:[2,42],16:[2,42],18:[2,42],24:[2,42],26:[2,42],31:[2,42],34:[2,42],38:[2,42],42:[2,42],44:[2,42],46:[2,42]},{14:35,15:[2,10],16:[1,36]},{18:[1,37]},{15:[2,14],16:[1,39],21:38},{5:[2,6],15:[2,6],30:[2,6],32:[2,6],35:[2,6],39:[2,6],47:[2,6]},{15:[1,41],23:40,24:[1,42]},{1:[2,1]},{5:[2,30],10:43,15:[2,30],17:16,30:[1,15],32:[1,17],35:[1,18],39:[1,19],47:[1,20]},{5:[2,4],15:[2,4]},{5:[2,3],15:[2,3]},{5:[2,25],15:[2,25],31:[1,44],34:[2,25],38:[2,25]},{17:49,19:48,24:[1,50],28:45,43:46,45:47,47:[1,20],48:[1,51]},{15:[1,53],33:52,34:[2,32]},{17:49,19:48,24:[1,50],28:56,36:54,41:[1,55],43:46,45:47,47:[1,20],48:[1,51]},{17:49,19:48,24:[1,50],28:56,36:57,41:[1,55],43:46,45:47,47:[1,20],48:[1,51]},{15:[1,58]},{13:59,17:22,47:[1,20]},{19:60,48:[1,51]},{15:[1,61]},{17:62,47:[1,20]},{15:[1,63]},{4:64,7:3,8:4,9:5,11:8,12:[1,6],15:[2,7],20:[1,7],22:[1,9],30:[2,7],32:[2,7],35:[2,7],39:[2,7],47:[2,7]},{17:65,47:[1,20]},{5:[2,2],15:[2,2]},{5:[2,23],15:[2,23],34:[2,23],38:[2,23]},{5:[2,24],15:[2,24],34:[2,24],38:[2,24]},{5:[2,35],15:[2,35],26:[2,35],34:[2,35],38:[2,35],42:[2,35],44:[1,66]},{5:[2,37],15:[2,37],26:[2,37],34:[2,37],38:[2,37],42:[2,37],44:[2,37],46:[1,67]},{5:[2,39],15:[2,39],26:[2,39],34:[2,39],38:[2,39],42:[2,39],44:[2,39],46:[2,39]},{5:[2,40],15:[2,40],26:[2,40],34:[2,40],38:[2,40],42:[2,40],44:[2,40],46:[2,40]},{17:49,19:48,24:[1,50],28:68,43:46,45:47,47:[1,20],48:[1,51]},{5:[2,43],15:[2,43],16:[2,43],26:[2,43],34:[2,43],38:[2,43],42:[2,43],44:[2,43],46:[2,43]},{34:[1,69]},{10:70,15:[2,30],17:16,30:[1,15],32:[1,17],34:[2,30],35:[1,18],39:[1,19],47:[1,20]},{26:[1,71]},{17:49,19:48,24:[1,50],28:72,43:46,45:47,47:[1,20],48:[1,51]},{42:[1,73]},{26:[1,74]},{5:[2,8],15:[2,8],20:[2,8],22:[2,8],30:[2,8],32:[2,8],35:[2,8],39:[2,8],47:[2,8]},{14:75,15:[2,10],16:[1,36]},{15:[2,11],16:[2,11]},{5:[2,12],15:[2,12],22:[2,12],30:[2,12],32:[2,12],35:[2,12],39:[2,12],47:[2,12]},{15:[2,14],16:[1,39],21:76},{4:77,7:3,8:4,9:5,11:8,12:[1,6],15:[2,7],20:[1,7],22:[1,9],30:[2,7],32:[2,7],35:[2,7],39:[2,7],47:[2,7]},{15:[1,78]},{16:[1,80],25:79,26:[2,19]},{17:49,19:48,24:[1,50],28:81,43:46,45:47,47:[1,20],48:[1,51]},{17:49,19:48,24:[1,50],43:82,45:47,47:[1,20],48:[1,51]},{26:[1,83]},{5:[2,26],15:[2,26],34:[2,26],38:[2,26]},{15:[1,53],33:84,34:[2,32]},{37:[1,85]},{26:[2,33]},{17:49,19:48,24:[1,50],28:86,43:46,45:47,47:[1,20],48:[1,51]},{40:[1,87]},{15:[2,9]},{15:[2,13]},{15:[1,88]},{5:[2,16],15:[2,16],22:[2,16],30:[2,16],32:[2,16],35:[2,16],39:[2,16],47:[2,16]},{26:[1,89]},{17:90,47:[1,20]},{5:[2,36],15:[2,36],26:[2,36],34:[2,36],38:[2,36],42:[2,36]},{5:[2,38],15:[2,38],26:[2,38],34:[2,38],38:[2,38],42:[2,38],44:[2,38]},{5:[2,41],15:[2,41],26:[2,41],34:[2,41],38:[2,41],42:[2,41],44:[2,41],46:[2,41]},{34:[2,31]},{5:[2,30],10:91,15:[2,30],17:16,30:[1,15],32:[1,17],34:[2,30],35:[1,18],38:[2,30],39:[1,19],47:[1,20]},{26:[2,34]},{5:[2,30],10:92,15:[2,30],17:16,30:[1,15],32:[1,17],34:[2,30],35:[1,18],38:[2,30],39:[1,19],47:[1,20]},{5:[2,15],15:[2,15],22:[2,15],30:[2,15],32:[2,15],35:[2,15],39:[2,15],47:[2,15]},{15:[2,17]},{16:[1,80],25:93,26:[2,19]},{5:[2,28],15:[2,28],34:[2,28],38:[1,94]},{5:[2,29],15:[2,29],34:[2,29],38:[2,29]},{26:[2,18]},{5:[2,30],10:95,15:[2,30],17:16,30:[1,15],32:[1,17],34:[2,30],35:[1,18],38:[2,30],39:[1,19],47:[1,20]},{5:[2,27],15:[2,27],34:[2,27],38:[2,27]}],
defaultActions: {26:[2,1],72:[2,33],75:[2,9],76:[2,13],84:[2,31],86:[2,34],89:[2,17],93:[2,18]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function buildBlock(cd, vd, pd, c) {
  return {
    type: 'BLOCK',
    DEC_CONSTS: cd,
    DEC_VARS: vd,
    DEC_PROCS: pd,
    content: c
  };
}


/* Fin de la gram√°tica *//* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var reserved_words = {
  BEGIN: 'BEGIN',
  CALL: 'CALL',
  CONST: 'CONST',
  DO: 'DO',
  ELSE: 'ELSE',
  END: 'END',
  IF: 'IF',
  ODD: 'ODD',
  PROCEDURE: 'PROCEDURE',
  THEN: 'THEN',
  VAR: 'VAR',
  WHILE: 'WHILE'
}

function idORrw(x) {
  return (x.toUpperCase() in reserved_words)? x.toUpperCase() : 'ID'
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar espacios */
break;
case 1:return 42
break;
case 2:return 42
break;
case 3:return 18
break;
case 4:return 44
break;
case 5:return 46
break;
case 6:return idORrw(yy_.yytext)
break;
case 7:return 48
break;
case 8:return 16
break;
case 9:return 15
break;
case 10:return 5
break;
case 11:return 24
break;
case 12:return 26
break;
case 13:return 6
break;
case 14:return 'INVALID'
break;
}
},
rules: [/^(?:[\s\t\n\r])/,/^(?:[<>=!]=)/,/^(?:[<>])/,/^(?:=)/,/^(?:[+-])/,/^(?:[*/])/,/^(?:\b[a-zA-Z_]\w*\b)/,/^(?:\b[0-9]+\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pl0;
exports.Parser = pl0.Parser;
exports.parse = function () { return pl0.parse.apply(pl0, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}